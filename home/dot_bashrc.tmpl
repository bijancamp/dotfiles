###########################################
## Early Exit for Non-Interactive Shells ##
###########################################

case $- in
    *i*) ;;
      *) return;;
esac

############
## Prompt ##
############

WINDOW_TITLE="Bash"
USER="Bijan"

{{ if eq .host.purpose "personal" }}
LOCATION="Home"
{{ else if eq .host.purpose "work" }}
LOCATION=""
{{ end }}

LIGHT_GRAY="\[\e[0;37m\]"
LIGHT_GREEN="\[\e[1;32m\]"
YELLOW="\[\e[1;33m\]"
LIGHT_BLUE="\[\e[1;34m\]"
WHITE="\[\e[1;37m\]"
DEFAULT_COLOR="\[\e[0m\]"

# Ensure __git_ps1 is loaded for prompt
if ! command -v __git_ps1 &> /dev/null; then
  source ~/.git-prompt.sh
fi

PS1="\[\e]0;${WINDOW_TITLE}\a\]\n${LIGHT_GREEN}${USER}${WHITE}${LOCATION:+@${LIGHT_BLUE}${LOCATION}} ${YELLOW}\w${LIGHT_GRAY}"'`__git_ps1`'"${DEFAULT_COLOR}\n$ "

###########################
## Environment Variables ##
###########################

# Prepends a directory to PATH only if it's not already present
prepend_path() {
  local dir="$1"
  if [[ -z "${dir}" ]]; then
    echo "Usage: prepend_path <directory>" >&2
    return 1
  fi

  case ":${PATH}:" in
    *:"${dir}":*)
      # already in PATH, do nothing
      ;;
    *)
      export PATH="${dir}:${PATH}"
      ;;
  esac
}

prepend_path "$HOME/.local/bin"

export EDITOR="code --wait"

########################
## Shell Integrations ##
########################

# Enable Kiro shell integration
[[ "$TERM_PROGRAM" == "kiro" ]] && . "$(kiro --locate-shell-integration-path bash)"

# fnm shell setup
if command -v fnm &> /dev/null; then
  eval "$(fnm env --use-on-cd --shell bash)"
fi

#########################
## Completion Behavior ##
#########################

bind 'TAB':menu-complete
bind '"\e[Z"':menu-complete-backward
bind 'set completion-ignore-case on'
bind 'set show-all-if-ambiguous on'

#############
## Aliases ##
#############

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ch="chezmoi"

##################
## Windows-Only ##
##################

{{ if eq .chezmoi.os "windows" }}

alias cdr="cd /c/Repos"

{{ if eq .host.purpose "work" }}

alias build="build_closest -verbosity:minimal -clp:errorsonly"
alias rebuild="build_closest -t:rebuild -verbosity:minimal -clp:errorsonly"

build_closest () {
  local repo_root

  repo_root="$(git rev-parse --show-toplevel 2> /dev/null)"

  if [[ $? != 0 ]]; then
    echo "Not in a Git repo!"
    return 1
  fi

  repo_root="$(cygpath "$repo_root")"

  local directory
  directory="$PWD"

  while :; do
    if { directory_buildable "$directory"; }; then
      MSBuild.exe "$directory" "$@"
      break
    fi

    # Reached repo root without finding a buildable directory
    if [[ "$directory" == "$repo_root" ]]; then
      echo "Not within a project or solution!"
      break
    fi

    directory="$(dirname "$directory")"
  done
}

directory_buildable () {
  if ls "$1"/*.csproj &> /dev/null || \
     [[ -f "$directory"/website.publishproj ]] || \
     ls "$1"/*.sln &> /dev/null
  then
    return 0
  fi

  return 1
}

{{ end }}
{{ end }}
